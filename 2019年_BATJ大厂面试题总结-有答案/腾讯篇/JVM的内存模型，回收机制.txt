JVM的内存模型，回收机制
	Java内存模型结构分为线程共享区和线程私有区
　		线程共享区：堆、方法区
　		线程私有区：虚拟机栈、本地方法栈、程序 计数器

　		1、堆：用于存放对象实例和数组，由于堆是用来存放对象实例，因此堆也是垃圾收集器管理的主要区域，故也称为GC堆。由于现在的垃圾收集器基本都采用分代收集算法，所以堆的内部结构只包含新生代和老年代。
　		2、方法区：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
　　　　　		方法区通常和永久区(Perm)关联在一起，但永久代与方法区不是一个概念，只是有的虚拟机用永久代来实现方法区，这样就可以用永久代GC来管理方法区，省去专门内存管理的工作
　　　　　		根据Java虚拟机规范的规定，当方法区无法满足内存分配的需求时，将抛出 OutOfMemoryError 异常
　		3、虚拟机栈：每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息
		　　　　每个方法从调用直至完成的过程，对应一个栈帧在虚拟机栈中入栈到出栈的过程
		　　　　局部变量表主要存放一些基本类型的变量和对象句柄，它们可以是方法参数，也可以是方法的局部变量
　		4、程序计数器：为什么需要程序计数器？
　　　　　		在多线程情况下，当线程数超过CPU数量或CPU内核数量时，线程之间就要根据时间片轮询抢夺CPU时间资源。也就是说，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。
		　　　　因此，为了线程切换后能够恢复到正确的执行位置，每条线程都需要一个独立的程序计数器去记录其正在执行的字节码指令地址
		　　　　程序计数器是线程私有的一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器
		　　　　如果线程正在执行的是一个 Java 方法，计数器记录的是正在执行的字节码指令的地址
		　　　　如果正在执行的是 Native 方法，则计数器的值为空
		　　　　程序计数器是唯一一个没有规定任何 OutOfMemoryError 的区域









